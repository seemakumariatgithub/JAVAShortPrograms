    Java implements string as objects of type 'String'.
    Implementing strings as objects allows Java to full provide full complement of features that make string handling convenient.
    as string object can be constructed in various ways, makes it easy to obtain string whenever is needed.

    Now:
    In java the string object that we create, once created cannot be changed.
        Means the string object that is being created, the characters that it comprise of cannot be changed.
    So whenever we try to change the content as new string object gets created with the modifed characters.
    The original string remains unchanged.

    This approach is used, because the fixed, immutable string can be implemented more efficiently.

    For the cases where we need modifyable strings we have 'StringBuffer' and 'StringBuilder'.

==========================================================================================
String, StringBuilder, StringBuffer are defined in java.lang package
All these three classes are declared final.
All these three classes implement 'CharSequence' Interface.

=========================================================================================
NOTE:  The Object of type String are unchangeable, 
        means the contents of 'String' instance cannot be changed after it has been created.

        But ,the variable declared as String reference can be changed to point at some other String Object at any time.


==========================================================================================
Special String Operations:

    1. String Literals:

    2. String Concatination

    3. String Concatination with other data types

    4. toString() and String Conversion:
        Java converts data to its string representation during concatination,
        by calling one of the overloaded versions of the string conversion method 'valueOf() defined by String class.

        The 'valueOf()' is overloaded for all the primitive types and for type Object.
        For primmitive types, 'valueOf()' returns the string that contain human readable formate.
        For Object types,'valueOf()' calls the 'toString()' method on the object.

        The Overridden toString( ) method is automatically invoked when a class's object is
used in a concatenation expression or in a call to println( ).
==========================================================================================

CHARACTER EXTRACTION:

1. charAt():
    general form is :
        char charAt(int where)
2. getChars(): 
    general form is:
        char getChars(int sourceStartIndex, int sourceEndIndex,char[] target, int targetStartIndex )
3. getBytes():
    general form is :
        byte[] getBytes()

4. toCharArray():
    general form is:
        char[] toCharArray()

============================================================================================

STRING COMPARISON:

1. equals() 

    General form is:
        boolean equals(Object str)

    Here, str is the String Object that is being compaired with the invoking String Object.
    This method returns true if the string contains same characters and in same order.
    This comparison is case sensitive.

2. equalsIgnoreCase()

     General form is:
        boolean equalsIgnoreCase(String str)

    Here, str is the String Object that is being compaired with the invoking String Object.
    This method returns true if the string contains same characters and in same order.
    This comparison is not case sensitive.

3. regionMatches()

    There are two forms for this method
        General form are:
           1. boolean regionMatches(int startIndex, String str2, int str2StartIndex, int numChar)
            2. boolean regionMatches(boolean ignoreCase, int StartIndex, String str2, intstr2StartIndex, int numChar)

            Here 'startIndex' specifies the starting index from where the region begins in the invoking String object.
            'str2' specfies the string being compared with.
            'str2StartIndex' specifies the starting index in the str2, at which the comparison will start in str2.
            'numChar' specifies the length of substring being compared.


4. startsWith () and endsWith():
5. comapreTo()

        General form is:
            int compareTo(String str)

        Here str is the String being compared with the invoking String.
        This method compares the ACSII values and returns the result as less than zero, 0, greater than zero.
        result of comarision will be :
            1. Less than zero   => this is reurned when invoking string come before the 'str' in dictionary order.
            2. zero  => this is reurned when invoking string is same as 'str' in dictionary order.
            3. more that zero   => this is reurned when invoking string come after the 'str' in dictionary order.


        This method is specified in Comparator<T> interface, which is implemented by String .

        Another version is compareToIgnoreCase(String str)

===============================================================================
SEARCHING STRINGS

    String class has provided two overloaded methods for this:
        1. indexOf()
                int indexOf(int ch)
                int indexOf(String str)
                int indexOf(int ch, int startIndex)
                
        2. lastIndexOf()
                int lastIndexOf(int ch)
                int lastIndexOf(String str)
                int lastIndexOf(int ch, int startIndex)
        Here, 'startIndex specifies the inddex at which point the search begines.
        For indexOf(), the search runs from 'startIndex' to the end of the string.
        For lastIndexOf(), the sesarch runs from 'startIndex' to zero.

=================================================================================

MODIFY STRING

    NOTE: Since the String objects are immutable, so whenever we want to modify a String,
          we must either copy it into a StrngBuffer, StringBuilder, or use a String method that constructs a new copy of the string with our modifications complete.
         Such String methods are as below.

    1.substring():
        We can extract substring using this method.
        It have two forms:
            1. String substring(int startIndex)
            2. String substring(int startIndex, int endIndex)

            'startIndex' specifies the index at which substring will begin.
            This returns the copy of substring.


            first form starts the subsrting at 'startIndex' and runs to the end of invoking string
            second form starts the substring at 'startIndex' and stops at 'endIndex', but doesnot include the endIndex.


    2. concat()

        String concat(String str)

        This method creates a new string object, that contains content of invoking string, with the content of str appended at the end of it.

    3. replace()

        String replace(char originalChar, char replacement)
                This replace all the occurence of the 'originalChar' with the 'replacement' in the invoking string.

        String replace(CharSequence originalChar, CharSequence replacement)
                This replace all the occurance of a characterSequence 'originalChar' with the 'replacement' in the invoking string.

    4. trim()

            This methd returns the copy invoking string with all its leading and trailing white spaces trimed.


=======================================================================================================
DATA CONVERSION USING valueOf():

    This is a static method defined in String class.
    This is overloaded for all Java's build in types.
            - so that each type can be converted properly to String.
    This is also overlaoded for Object type.
    This method convertes an object from its internal formate to human readable form.

    NOTE: This method is called when string representation of other datatype is needed.

    When an object is passed to 'valueOf()', it will return result of call to object's toString().
    Calling directly toString() will give same result as well.

    Few general forms are:
        static String valueOf(double num)
        static String valueOf(char char[])
        static String valueOf(Object obj)

=================================================================================
join() 

    JDK8 adds this new method
    It is static method defined in String
    This method joins two or more strings, seperating each string with delimiter.
    This also lets to join a list of strings together.
    This method have two forms:
        1. static String join(charSequence delim,charSequence... str)
        2. static String join()

Eg: 

    import static java.lang.System.out;
    public class String08_joinMethod{
        public static void main(String[] args){
             String myString="Aa   Now is";
             String myString2="the time.";
             out.println(String.join(".....",myString,myString2));
             out.println(myString.isEmpty());
        }
    }

==================================================================================================
StringBuffer Class:

    - This is defined in the package:  java.lang
    - This class represents growable and writable character sequence.
    - This type of object can have characters or substring inserted in the middle or appended at the end.
    - StringBuffer Constructors:
        It have four constructors:
                StringBuffer()
                StringBuffer(int size)
                StringBuffer(String str)
                StringBuffer(CharSequence chars)
    - The no argument constructor bydefault reserve room for 16 characters.
    - The second constructor, creates object with size specified for the buffer.
    - The third constructor, creates StringBuffer object with specified string as initial content 
            and reserve room for 16 more characters without realocation.
    - The fourth constructor, creates StringBuffer object that conatain specified char sequences and
            reserve room for 16 more characters without reallocation.

====================================================================================================
length() and capacity() methods of StringBuffer:

    length() -> provides the current length of StringBuffer.
    capacity() -> proides the total allocated capacity to the StringBuffer object.
    - Their general forms are:
            int length()
            int capacity()

    - Other methods are:
        ensureCapacity():    void ensureCapacity(int minCapacity)
        setLength():         void setLength(int ln)
        charAt():            char charAt(int where)
        setCharAt():         void setCharAt(int where,char ch)
        getChars():          void getChars(int sourceStart, int sourceEnd, char[] target, int targetStart)
        append(): 
        insert(): 
        reverse():            StringBuffer reverse()
        delete():             StringBuffer delete(int startIndex,int endIndex)
        deleteCharAt():        StringBuffer deleteCharAt(int location)
        replace():             StringBuffer replace(int startIndex,int endIndex,String str)
        subString():            StringBuffer subString(int startIndex)
                                StringBuffer subString(int startIndex,int endIndex)

etcs.
==========================================================================================================
StringBuilder class:

        - This class is defined as final class in package: java.lang
        - This was introduced in JDK5
        - This class is same as Stringbuffer, except this is not sychronized.
        - Hence it is not thread safe.



        








        






    
