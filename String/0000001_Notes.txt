    Java implements string as objects of type 'String'.
    Implementing strings as objects allows Java to full provide full complement of features that make string handling convenient.
    as string object can be constructed in various ways, makes it easy to obtain string whenever is needed.

    Now:
    In java the string object that we create, once created cannot be changed.
        Means the string object that is being created, the characters that it comprise of cannot be changed.
    So whenever we try to change the content as new string object gets created with the modifed characters.
    The original string remains unchanged.

    This approach is used, because the fixed, immutable string can be implemented more efficiently.

    For the cases where we need modifyable strings we have 'StringBuffer' and 'StringBuilder'.

==========================================================================================
String, StringBuilder, StringBuffer are defined in java.lang package
All these three classes are declared final.
All these three classes implement 'CharSequence' Interface.

=========================================================================================
NOTE:  The Object of type String are unchangeable, 
        means the contents of 'String' instance cannot be changed after it has been created.

        But ,the variable declared as String reference can be changed to point at some other String Object at any time.


==========================================================================================
Special String Operations:

    1. String Literals:

    2. String Concatination

    3. String Concatination with other data types

    4. toString() and String Conversion:
        Java converts data to its string representation during concatination,
        by calling one of the overloaded versions of the string conversion method 'valueOf() defined by String class.

        The 'valueOf()' is overloaded for all the primitive types and for type Object.
        For primmitive types, 'valueOf()' returns the string that contain human readable formate.
        For Object types,'valueOf()' calls the 'toString()' method on the object.

        The Overridden toString( ) method is automatically invoked when a class's object is
used in a concatenation expression or in a call to println( ).





    
