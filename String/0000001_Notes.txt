    Java implements string as objects of type 'String'.
    Implementing strings as objects allows Java to full provide full complement of features that make string handling convenient.
    as string object can be constructed in various ways, makes it easy to obtain string whenever is needed.

    Now:
    In java the string object that we create, once created cannot be changed.
        Means the string object that is being created, the characters that it comprise of cannot be changed.
    So whenever we try to change the content as new string object gets created with the modifed characters.
    The original string remains unchanged.

    This approach is used, because the fixed, immutable string can be implemented more efficiently.

    For the cases where we need modifyable strings we have 'StringBuffer' and 'StringBuilder'.

==========================================================================================
String, StringBuilder, StringBuffer are defined in java.lang package
All these three classes are declared final.
All these three classes implement 'CharSequence' Interface.

=========================================================================================
NOTE:  The Object of type String are unchangeable, 
        means the contents of 'String' instance cannot be changed after it has been created.

        But ,the variable declared as String reference can be changed to point at some other String Object at any time.


==========================================================================================
Special String Operations:

    1. String Literals:

    2. String Concatination

    3. String Concatination with other data types

    4. toString() and String Conversion:
        Java converts data to its string representation during concatination,
        by calling one of the overloaded versions of the string conversion method 'valueOf() defined by String class.

        The 'valueOf()' is overloaded for all the primitive types and for type Object.
        For primmitive types, 'valueOf()' returns the string that contain human readable formate.
        For Object types,'valueOf()' calls the 'toString()' method on the object.

        The Overridden toString( ) method is automatically invoked when a class's object is
used in a concatenation expression or in a call to println( ).
==========================================================================================

CHARACTER EXTRACTION:

1. charAt():
    general form is :
        char charAt(int where)
2. getChars(): 
    general form is:
        char getChars(int sourceStartIndex, int sourceEndIndex,char[] target, int targetStartIndex )
3. getBytes():
    general form is :
        byte[] getBytes()

4. toCharArray():
    general form is:
        char[] toCharArray()

============================================================================================

STRING COMPARISON:

1. equals() 

    General form is:
        boolean equals(Object str)

    Here, str is the String Object that is being compaired with the invoking String Object.
    This method returns true if the string contains same characters and in same order.
    This comparison is case sensitive.

2. equalsIgnoreCase()

     General form is:
        boolean equalsIgnoreCase(String str)

    Here, str is the String Object that is being compaired with the invoking String Object.
    This method returns true if the string contains same characters and in same order.
    This comparison is not case sensitive.

3. regionMatches()

    There are two forms for this method
        General form are:
           1. boolean regionMatches(int startIndex, String str2, int str2StartIndex, int numChar)
            2. boolean regionMatches(boolean ignoreCase, int StartIndex, String str2, intstr2StartIndex, int numChar)

            Here 'startIndex' specifies the starting index from where the region begins in the invoking String object.
            'str2' specfies the string being compared with.
            'str2StartIndex' specifies the starting index in the str2, at which the comparison will start in str2.
            'numChar' specifies the length of substring being compared.


4. startsWith () and endsWith():
5. comapreTo()

        General form is:
            int compareTo(String str)

        Here str is the String being compared with the invoking String.
        This method compares the ACSII values and returns the result as less than zero, 0, greater than zero.
        result of comarision will be :
            1. Less than zero   => this is reurned when invoking string come before the 'str' in dictionary order.
            2. zero  => this is reurned when invoking string is same as 'str' in dictionary order.
            3. more that zero   => this is reurned when invoking string come after the 'str' in dictionary order.


        This method is specified in Comparator<T> interface, which is implemented by String .

        Another version is compareToIgnoreCase(String str)







    
