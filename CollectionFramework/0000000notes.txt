java.util PACKAGE:
===============================================================================================
This is versy powerful package, that contains large assortment of classes and interfaces,
That support a broad range of functionality.
For Example:
    To name few: classes that can :
        1. generate pseudorandom number
        2. manage date and time
        3. observve events
        4. manipulate sets of bits
        5. tokenize strings
        6. handle formatted data

java.util package also containes one ot the Java's most powerful subsystems: 
    The COLLECTIONS Framewwork.

A list of top level Classes in java.util package is:

AbstractCollection 
AbstractList 
AbstractMap 
AbstractQueue 
AbstractSequentialList 
AbstractSet 
ArrayDeque 
ArrayList
Arrays 
Base64 (Added by JDK 8.) 
BitSet 
Calendar 
Collections 
Currency 
Date 
Dictionary 
DoubleSummaryStatistics(Added by JDK 8.)
EnumMap 
EnumSet 
EventListenerProxy
EventObject 
FormattableFlags 
Formatter 
GregorianCalendar 
HashMap 
HashSet 
Hashtable 
IdentityHashMap 
IntSummaryStatistics(Added by JDK 8.)
LinkedHashMap 
LinkedHashSet 
LinkedList 
ListResourceBundle 
Locale 
LongSummaryStatistics(Added by JDK 8.)
Objects 
Observable 
Optional (Added by JDK 8.) 
OptionalDouble (Added by JDK 8.)
OptionalInt (Added by JDK 8.) 
OptionalLong (Added by JDK 8.) 
PriorityQueue 
Properties
PropertyPermission
PropertyResourceBundle
Random
ResourceBundle
Scanner
ServiceLoader
SimpleTimeZone
Spliterators (Added by JDK 8.)
SplitableRandom (Added by JDK 8.)
Stack
StringJoiner (Added by JDK 8.)
StringTokenizer
Timer
TimerTask
TimeZone
TreeMap
TreeSet
UUID
Vector
WeakHashMap


Important interface defined in java.uitl package :

Collection 
Comparator 
Deque 
Enumeration 
EventListener 
Formattable 
Iterator 
List 
ListIterator 
Map 
Map.Entry 
NavigableMap 
NavigableSet 
Observer 
PrimitiveIterator (Added by JDK 8.) 
PrimitiveIterator.OfDouble(Added by JDK 8.) 
PrimitiveIterator.OfInt (Added by JDK 8.) 
PrimitiveIterator.OfLong (Added by JDK 8.) 
Queue
RandomAccess
Set
SortedMap
SortedSet
Spliterator (Added by JDK 8.)
Spliterator.OfDouble(Added by JDK 8.)
Spliterator.OfInt (Added by JDK 8.)
Spliterator.OfLong (Added by JDK 8.)
Spliterator.OfPrimitive (Added by JDK 8.)



=================================================================================================
COLLECTIONS FRAMEWORK:
    The collections framework is a sophisticated hierarchy of interfaces and classes,
          that provide state-of-the-art technology for managing groups of objects.
    This framework has standardized the way in which group of objects can be handled by a programs.
    This framework was added in JDK1.2
    Prior to this java provided ad hoc classes, 'Dictionary','Vector','Stack, 'Properties', to store 
            and manipulate the group of objects.


GOAL for defining COLLETIONS FRAMEWORK:
    1. To be highly efficient and provide high performance
    2. To allow different types of collections to work in simillar manner.
            To have high degree of interoperability.
    3. Extending and adapting a collections whould be easy.
    4. Algorithm is also an important part of Collection Farmaework.
            These are defined as static method within the Collections class.
                Hence they are available to all collections.
            This Alogorithms have provided a standard way to manipulate the data in collections.
            Algorithms here operate on collections.
    5. Iterator interface:
        An iterator have defined a generalized and standard way for accessing the elements in the collections
                one at a time.
        An iterator provides the means of enumerating the content of collection.
        Each collection have provided iterator, 
            hence elements of any colections can be accessed through the methods provided by Iterator.

We can also implement our own collection.
Various special purpose implementations are created for convineince of use,
And along with it some partial implementationss are provded that make creating our own collection class easier.
And a mechanism were added, in Collections Framwork that allow the integration of standard arrays into the Colletions Framework


    6. In addition to collections, Collections Framework has also defined seeral map Interfaces and classes.
            Although maps are part of Collections Framework, thy are not 'collections'.

====================================================================================================
JDK5 has changed the Collections Framework:

    Some fundamental changes were done are, addition of:
        1. generics
        2. Autoboxing/unboxing
        3. for-each style of 'for' loop.

        1. generics:
                Generic has fundamentaly changed the collections framework.
                All Collections are now generic.

                Genercis added the 'type Safety' feature to collections.
                Proir to generics, all collections stored Objects references, 
                    which meant that any collection could store any type of object.
                Doing this resulted in run-time type mismatch errors, when type mismatch occured.
                Now with generic, it s possible to explicitly state the type of data being stored, 
                    and thus run-time type mismatch erros can be avoided.

        2. Autoboxing/unboxing:
                Autoboxing Facilitates the Use of Primitive Datatypes.
                Autoboxing/unboxing faclitates the storing of primtive datatypes in collections.
                A collection can store only references, not the prmitive types value.

        3. for-each style of 'for' loop:
                
==============================================================================================================
THE COLLECTIONS FRAMEWORK's INTERFACES:

        Here we will discuss the core Interfaces.
        These interfaces determines the fundamental nature of the collection classes.
        And the concrete classes simply provide different implementation of standard interfaces.

        The interfaces that underpin the Collections Framework are:

       |=> Collection:
           |=> List
           |=> Set:
                   |=> SortedQueue
                   |=> NavigableQueue
           |=> Queue
                   |=> Deque


       |=> Collection: This Interface is the top level of collections hierarchy
                       This interface enables to work with group of objects.

           |=> List: handles sequences.
           |=> Set: handles sets, i.e unique elements in group.

                   |=> SortedQueue : handles sorted sets
                       |=> NavigableQueue: handles retrieval of elements based on closest match.

           |=> Queue : handles special type of list, that removes elements from head.
                   |=> Deque : handles double-ended queue.

NOTE : Along with these, collections also have below important interfaces:
        1. Comparator
        2. RandomAccess
        3. Iterator
        4. ListIterator
        5. Spliterator ( from JDK8)


        1. Comparator => defines how two objects are compared
        2. RandomAccess => by implementing this, a list indicates that it supports efficient and random access to its elements.

        3. Iterator =>
        4. ListIterator =>
        5. Spliterator ( from JDK8) => All these three enumerate the object within the collection.


To provide general flexibility, collection have few methods defind as Optional.
Optional method enables us to modify the content of collection. 
Collection that support such methods are called as 'modifiable".
Collection that do not support such methods are called 'unmodifiable'.

If an attempt is made to use one of this method on an unmodifiable collection, an exception 'UnsupportedOperationException' is thrown.

NOTE : ALL BUILT-IN COLLECTIONS ARE MODIFIABLE

=======================================================================================================================
Collection Interface:

    This is the foundation interface.
    All classes that defines collection, must implement this interface.
    Collection is Generic interface:

            interface Collection<E>

    Here E: specifies he type of object a collection can store.
    Collection interface extends Iterable interface.
        This means that a collection can be cycled through, by using for-each type for loop.
            NOTE: Only classes that implements 'Iterable' interface can be cycled through by for loop.

    Collection interface declares the methods , that all core collections will have.
    Below are few methods and their description:
    
        boolean add(E obj) : Adds obj to the invoking collection. 
                            Returns true if obj was added to the collection.
                            Returns false if obj is already a member of the collection and the collection does not allow duplicates.
        
        boolean addAll(Collection<? extends E> c): Adds all the elements of c to the invoking collection.
                                                    Returns true if the collection changed (i.e., the elements were added). 
                                                    Otherwise, returns false.
        
        void clear( ) : Removes all elements from the invoking collection.
        
        boolean contains(Object obj) : Returns true if obj is an element of the invoking collection. Otherwise, returns false.
        
        boolean containsAll(Collection<?> c) : Returns true if the invoking collection contains all elements of c. Otherwise, returns false.
        
        boolean equals(Object obj) Returns true if the invoking collection and obj are equal. Otherwise, returns false.
        
        int hashCode( ):  Returns the hash code for the invoking collection.
        
        boolean isEmpty( ) : Returns true if the invoking collection is empty. Otherwise, returns false.
        
        Iterator<E> iterator( ) : Returns an iterator for the invoking collection.
        
        default Stream<E> parallelStream( ) : Returns a stream that uses the invoking collection as its source for elements. 
                                                If possible, the stream supports parallel operations. (Added by JDK 8.)
        
        boolean remove(Object obj) : Removes one instance of obj from the invoking collection. 
                                    Returns true if the element was removed.
                                    Otherwise, returns false.
        
        boolean removeAll(Collection<?> c) : Removes all elements of c from the invoking collection.
                                             Returns true if the collection changed (i.e., elements were removed). 
                                             Otherwise, returns false.
        
        default boolean removeIf( Predicate<? super E> predicate): Removes from the invoking collection those elements
                                                                    that satisfy the condition specified by predicate. (Added by JDK 8.)
        
        boolean retainAll(Collection<?> c): Removes all elements from the invoking collection except those in c. 
                                            Returns true if the collection changed(i.e., elements were removed). 
                                            Otherwise, returns false.

        int size( ) : Returns the number of elements held in the invoking collection.
        
        default Spliterator<E> spliterator( ): Returns a spliterator to the invoking collections.(Added by JDK 8.)
        
        default Stream<E> stream( ): Returns a stream that uses the invoking collection as its source for elements. The stream is sequential.(Added by JDK 8.) 
        
        Object[ ] toArray( ): Returns an array that contains all the elements stored in the invoking collection. 
                                The array elements are copies of the collection elements.
        
        <T> T[ ] toArray(T array[ ]): Returns an array that contains the elements of the invoking collection. 
                                        The array elements are copies of the collection elements. 
                                        If the size of array equals the number of elements, these are returned in array. 
                                        If the size of array is less than the number of elements, a new array of the necessary size is allocated and returned. 
                                        If the size of array is greater than the number of elements, the array element following the last collection element is set to null.
                                        An 'ArrayStoreException' is thrown if any collection element has a type that is not a subtype of array.
    
        
        REFERENCE LINK: https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html

        The above methods can throw below exceptions:
        1. UnsupporteOperationException: this occurs if collection cannot be modified
        2. ClassCastException : this occurs when an attempt is made to add incomaptible object to a collection
        3. NullPointerException : this occurs when an attempt is made to store a null object, a null object is not allowed in collection.
        4. IllegalArgumentException : this occurs if invalid argument is used.
        5. IllegalStateException : this is thrown if an attempt is made to add an element of fixed -length collection that is full.
        6. ArrayStoreException: If runtime type of array is not supertype of runtime type ofevery element of the collection.

 
 =================================================================================================================
    









































































