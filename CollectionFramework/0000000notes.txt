java.util PACKAGE:
===============================================================================================
This is versy powerful package, that contains large assortment of classes and interfaces,
That support a broad range of functionality.
For Example:
    To name few: classes that can :
        1. generate pseudorandom number
        2. manage date and time
        3. observve events
        4. manipulate sets of bits
        5. tokenize strings
        6. handle formatted data

java.util package also containes one ot the Java's most powerful subsystems: 
    The COLLECTIONS Framewwork.

A list of top level Classes in java.util package is:

AbstractCollection 
AbstractList 
AbstractMap 
AbstractQueue 
AbstractSequentialList 
AbstractSet 
ArrayDeque 
ArrayList
Arrays 
Base64 (Added by JDK 8.) 
BitSet 
Calendar 
Collections 
Currency 
Date 
Dictionary 
DoubleSummaryStatistics(Added by JDK 8.)
EnumMap 
EnumSet 
EventListenerProxy
EventObject 
FormattableFlags 
Formatter 
GregorianCalendar 
HashMap 
HashSet 
Hashtable 
IdentityHashMap 
IntSummaryStatistics(Added by JDK 8.)
LinkedHashMap 
LinkedHashSet 
LinkedList 
ListResourceBundle 
Locale 
LongSummaryStatistics(Added by JDK 8.)
Objects 
Observable 
Optional (Added by JDK 8.) 
OptionalDouble (Added by JDK 8.)
OptionalInt (Added by JDK 8.) 
OptionalLong (Added by JDK 8.) 
PriorityQueue 
Properties
PropertyPermission
PropertyResourceBundle
Random
ResourceBundle
Scanner
ServiceLoader
SimpleTimeZone
Spliterators (Added by JDK 8.)
SplitableRandom (Added by JDK 8.)
Stack
StringJoiner (Added by JDK 8.)
StringTokenizer
Timer
TimerTask
TimeZone
TreeMap
TreeSet
UUID
Vector
WeakHashMap


Important interface defined in java.uitl package :

Collection 
Comparator 
Deque 
Enumeration 
EventListener 
Formattable 
Iterator 
List 
ListIterator 
Map 
Map.Entry 
NavigableMap 
NavigableSet 
Observer 
PrimitiveIterator (Added by JDK 8.) 
PrimitiveIterator.OfDouble(Added by JDK 8.) 
PrimitiveIterator.OfInt (Added by JDK 8.) 
PrimitiveIterator.OfLong (Added by JDK 8.) 
Queue
RandomAccess
Set
SortedMap
SortedSet
Spliterator (Added by JDK 8.)
Spliterator.OfDouble(Added by JDK 8.)
Spliterator.OfInt (Added by JDK 8.)
Spliterator.OfLong (Added by JDK 8.)
Spliterator.OfPrimitive (Added by JDK 8.)



=================================================================================================
COLLECTIONS FRAMEWORK:
    The collections framework is a sophisticated hierarchy of interfaces and classes,
          that provide state-of-the-art technology for managing groups of objects.
    This framework has standardized the way in which group of objects can be handled by a programs.
    This framework was added in JDK1.2
    Prior to this java provided ad hoc classes, 'Dictionary','Vector','Stack, 'Properties', to store 
            and manipulate the group of objects.


GOAL for defining COLLETIONS FRAMEWORK:
    1. To be highly efficient and provide high performance
    2. To allow different types of collections to work in simillar manner.
            To have high degree of interoperability.
    3. Extending and adapting a collections whould be easy.
    4. Algorithm is also an important part of Collection Farmaework.
            These are defined as static method within the Collections class.
                Hence they are available to all collections.
            This Alogorithms have provided a standard way to manipulate the data in collections.
            Algorithms here operate on collections.
    5. Iterator interface:
        An iterator have defined a generalized and standard way for accessing the elements in the collections
                one at a time.
        An iterator provides the means of enumerating the content of collection.
        Each collection have provided iterator, 
            hence elements of any colections can be accessed through the methods provided by Iterator.

We can also implement our own collection.
Various special purpose implementations are created for convineince of use,
And along with it some partial implementationss are provded that make creating our own collection class easier.
And a mechanism were added, in Collections Framwork that allow the integration of standard arrays into the Colletions Framework


    6. In addition to collections, Collections Framework has also defined seeral map Interfaces and classes.
            Although maps are part of Collections Framework, thy are not 'collections'.

====================================================================================================
JDK5 has changed the Collections Framework:

    Some fundamental changes were done are, addition of:
        1. generics
        2. Autoboxing/unboxing
        3. for-each style of 'for' loop.

        1. generics:
                Generic has fundamentaly changed the collections framework.
                All Collections are now generic.

                Genercis added the 'type Safety' feature to collections.
                Proir to generics, all collections stored Objects references, 
                    which meant that any collection could store any type of object.
                Doing this resulted in run-time type mismatch errors, when type mismatch occured.
                Now with generic, it s possible to explicitly state the type of data being stored, 
                    and thus run-time type mismatch erros can be avoided.

        2. Autoboxing/unboxing:
                Autoboxing Facilitates the Use of Primitive Datatypes.
                Autoboxing/unboxing faclitates the storing of primtive datatypes in collections.
                A collection can store only references, not the prmitive types value.

        3. for-each style of 'for' loop:
                
==============================================================================================================
THE COLLECTION INTERFACES:

        Here we will discuss the core Interfaces.
        These interfaces determines the fundamental nature of the collection classes.
        And the concrete classes simply provide different implementation of standard interfaces.

        The interfaces that underpin the Collections Framework are:

       |=> Collection:
           |=> List
           |=> Set:
                   |=> SortedQueue
                   |=> NavigableQueue
           |=> Queue
                   |=> Deque


       |=> Collection: This Interface is the top level of collections hierarchy
                       This interface enables to work with group of objects.

           |=> List: handles sequences.
           |=> Set: handles sets, i.e unique elements in group.

                   |=> SortedQueue : handles sorted sets
                       |=> NavigableQueue: handles retrieval of elements based on closest match.

           |=> Queue : handles special type of list, that removes elements from head.
                   |=> Deque : handles double-ended queue.

NOTE : Along with these, collections also have below important interfaces:
        1. Comparator
        2. RandomAccess
        3. Iterator
        4. ListIterator
        5. Spliterator ( from JDK8)


        1. Comparator => defines how two objects are compared
        2. RandomAccess => by implementing this, a list indicates that it supports efficient and random access to its elements.

        3. Iterator =>
        4. ListIterator =>
        5. Spliterator ( from JDK8) => All these three enumerate the object within the collection.


To provide general flexibility, collection have few methods defind as Optional.
Optional method enables us to modify the content of collection. 
Collection that support such methods are called as 'modifiable".
Collection that do not support such methods are called 'unmodifiable'.

If an attempt is made to use one of this method on an unmodifiable collection, an exception 'UnsupportedOperationException' is thrown.



NOTE : ALL BUILT-IN COLLECTIONS ARE MODIFIABLE





































































