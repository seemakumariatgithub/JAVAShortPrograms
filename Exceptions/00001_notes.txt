An Exception in java is the object, that describes the Exceptional conditions, that have occured during the execution of piece of code.

=======================================================================
ALgorithm for Exception handling in JAVA
1. When an exceptional condition occurs
2. Create an exception object, that describes/represents this exceptional conditions
3. This object is thrown by method in which this condition have occured.
4. The exception object is either handled by this method itself or pass it on .
5. In either way at some point this exception object will be handled.

========================================================================
Exception object can be created in two ways:
1. Exception object can be generated by Java Runtime system.
2. Exception object can be manually generated within the code.

1. The Exception object is generated by Java Runtime System, when the java related fundamentals error has occured, that voilates the rule of the java languange or the constraints of Java execution Environment.
2. The Exception object is generated manually, typically when we want to report some error condition to the caller of the method.

========================================================================
JAVA Exceptions are managed by using five keywords:
  1. try
  2. catch
  3. throw
  4. throws
  5. finally

  1. try  - The Block of code that we want to monitor for exceptions is contained within try block
  2. catch - Exception thrown by try block is handled within catch block
  3. throw - To manually throw an exception "thorw" keyword is used
  4. throws - The exception that have to be thrown out of the method, should be specified by "throws" clause
  5. finally - The block of code that absolutly need to be executed after try block completes, is put within the "finally" block.

========================================================================
Exception Types:
  All Exception types are the subclass of build-in class Throwable.

Subclasses of Throwable: Immediatly below throwable are two branches/subclasses
  1. Exception
  2. Error

  1. Exception: 
        This class is used for the exception condition that a user programm should catch.
        This class is used to create custom exceptions as well.
        An Important subclass of this class is RuntimeException class, 
              Exception of this type is automatically defined for the program that we write. like division by zero.

 2. Error:
        This is used to defined the exception that is not expected to be caught by user program.
        This type of exceptions are used by JAVA Runtime system.
            One example of this type is " Stack overflow".
==========================================================================
try/catch block:
  Once the exception occurs (or the exception is explicitly thorwn by throw keyword) the control is thrown out of the try block,
  and it is transfered to the catch block.
  And the line of code in try block, after the line that have thrown the exception will never be executed.

  In other word, since the catch block is not called, the control will never be returned.

  Once the catch block is executed, the program control will continue to the next line in the program following the try/catch block.

  The scope of catch block is restricted to the immediatly preceeded try block.

  The goal of a well construced catch clause is to resolve the exception condition and then continue the program as if the error had never occured.

Code Example: Exception02_TryCatchExm and Exception02_TryCatchExm2
========================================================================
Displaying the error of Exception:
    Since the Throwable class has overwriten the toString(), the error message can by displayed simply by passing the Exception as an argument.

  while using multiple catch blocks, the subclass Exception should aways be writtenn before the Superclass Exception.

    While having nested try statement, the exceptions will be caught in the order from inner try block's catch to outer try block's catch.

    Nesting of try statements can occur in less obvious ways when method calls are involved.
    For example, you can enclose a call to a method within a try block. Inside that method is another try statement
========================================================================
throw:
    This keyword is used to throw an exception explicitly.
    General form of this statement is:
          throw ThrowableInstance

    Here ThrowableInstance is the object of type Throwable or the subclass of Throwable.

NOTE:  Primitive types, such as int or char, as well as non-Throwable classes, such as String and Object, cannot be used as exceptions.

We can obtain Throwable object in TWO ways:
  1. Using the parameter in the catch clause
  2. Using new keyword, creating one object

  The flow of excution stops immediatly after the throw statement.
  The nearest enclosing try block is inspected to see for the catch statement that matches the exception type thrown.
  If it does find the match, the control is transfered to that catch statement. If match is not  found then next enclosing try statement is inspected, and so on. 
  If still no match is found, then the default exception handler halts the program, and stack trace is being printed.

  Code Example : Exception03_ReThrowingException and Exception03_ReThrowingException2 

========================================================================
throws:

  If a method is capable of causing an exception but it does not handles an exception, or the method is not capable of handling the excpetion, 
  Then in that case the called method must specify this behaviour to the caller method, so that  the caller method can gaurd themselves against exception.
  This is done by using throws clause in the method's declaration.

  throws caluse must lists all the posible exceptions that this method might throw.

  It is necessessary to list these exceptions, otherwise complie time error will be thrown.
  All exceptions should be mentioned in the throws clause list, except of error type, RuntimeException type or their subclass type.

  General Form is :

    <type> <methodName> (<Parameter list>) thorws <Exception lists>{
      // method body
    }

Code Example: Exception04_throwsClause.java
========================================================================
finally

  This clause is optional
  However the try clause must have at least one catch or one finally caluse.

NOTE: If a finally block is associate with a try block, the finally block will be executed on completion of try block.

Code Example :Exception05_finallyClause.java
========================================================================
Checked and Unchecked Exceptions:

  1. Unchecked Exceptions:
          Commpiler doesnot checks whether these exceptions are handled or thrown by the method, hence they are called unchecked exceptions. 
          These exceptions are not checked by compiler at compile time.
          The methods that may throw these types of exceptions are not expected to handle them or mention them in throws list.

          Unchecked Exception types are of type RuntimeException or its subclasses, or Error type or its subclass.

          
  2. Checked Exceptions:
        Commpiler expects these exceptions to be handled or thrown by the method, hence they are called checked exceptions. 
          These exceptions are checked by compiler at compile time.
          The methods that may throw these types of exceptions are expected to handle them or mention them in throws list.

Unchecked Exceptions are subclass of RuntimeExceptions:

AnnotationTypeMismatchException, 
ArithmeticException, 
ArrayStoreException,
BufferOverflowException, 
BufferUnderflowException, 
CannotRedoException, 
CannotUndoException,
ClassCastException, 
CMMException, 
CompletionException, 
ConcurrentModificationException,
DataBindingException, 
DateTimeException, 
DOMException,
EmptyStackException,
EnumConstantNotPresentException, 
EventException, 
FileSystemAlreadyExistsException, 
FileSystemNotFoundException, 
IllegalArgumentException, 
IllegalMonitorStateException, 
IllegalPathStateException, 
IllegalStateException, 
IllformedLocaleException, 
ImagingOpException,
IncompleteAnnotationException, 
IndexOutOfBoundsException, 
JMRuntimeException, 
LSException,
MalformedParameterizedTypeException, 
MalformedParametersException, 
MirroredTypesException, 
MissingResourceException,
NegativeArraySizeException,
NoSuchElementException, 
NoSuchMechanismException, 
NullPointerException, 
ProfileDataException, 
ProviderException, 
ProviderNotFoundException, 
RasterFormatException, 
RejectedExecutionException, 
SecurityException, 
SystemException, 
TypeConstraintException, 
TypeNotPresentException,
UncheckedIOException, 
UndeclaredThrowableException, 
UnknownEntityException, 
UnmodifiableSetException, 
UnsupportedOperationException, 
WebServiceException,
WrongMethodTypeException

MOSTCOMMON ONES ARE:
===================
ArithmeticException,
BufferOverflowException, 
BufferUnderflowException, 
ClassCastException, 
DataBindingException, 
DateTimeException,
EmptyStackException,
EnumConstantNotPresentException, 
EventException,
FileSystemNotFoundException, 
IllegalArgumentException,
IllegalStateException,
IndexOutOfBoundsException
      ArrayIndexOutOfBoundsException, 
      StringIndexOutOfBoundsException
NegativeArraySizeException,
NoSuchElementException, 
NullPointerException,
SecurityException, 
SystemException, 
TypeConstraintException, 
TypeNotPresentException,
UncheckedIOException, 
          
  
=========================================================================
Custom Exception or Creating your own exception

      This can be done by extending the Exception class.
      Your custom class donot need to actually implement anything. It is their existence in the type system that allows us to use them as exception.
     
==============================
Chained Exception
==============================
Exception handlng with method overriding

    With method overridding two types of problems exist:
      1. When method in super class dosenot handles/declares/throws the exception
      2. When method in superclass declares/hanldes/throws the exception

      1. When method in super class dosenot handles/declares/throws the exception
            Here now two cases exits:
              a.If superclass doesnot declares exception and subclass declares checked exception
              b.If superclass doesnot declares exception and subclass declares unchecked exception
          
      2. When method in superclass declares/hanldes/throws the exception
             Here now three cases exits:
              a.If superclass declares exception and subclass declares child exception of exception declared in superclass
                  OR same exception type
                  OR any new RuntimeException type(unchecked exception)
              b.If superclass declares exception and subclass declares exception that is not subclass of exception declared in superclass
              c.If superclass declares exception and subclass declares no exception superclass

    1.a.If superclass doesnot declares exception and subclass declares checked exception
         - compiler will give error
    1.b.If superclass doesnot declares exception and subclass declares unchecked exception
         - compiler will give no error
    2.a.If superclass declares exception and subclass declares child exception of exception declared in superclass
          OR same exception type
          OR any new RuntimeException type(unchecked exception)
         - compiler will give no error
    2.b.If superclass declares exception and subclass declares exception that is not subclass of exception declared in superclass
         - compiler will give error
    2.c.If superclass declares exception and subclass declares no exception superclass
        - compiler will give no error

Conclusion : 
    1. If superClass declares no exception, then subclass can decalre only unchecked exception while overriding a method.
    2. If superClass declares exceptio, then subclass can declare, same class exception, childclass exception, or unchecked exceptions while overriding a method.
    3. If superClass declares exception, then subclass may override, without declaring exception as well, while overridng a method.

========================================================================


