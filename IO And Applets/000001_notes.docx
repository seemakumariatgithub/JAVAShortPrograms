There are two main packages for IO in java :
  1. io 
  2. applet

  1. io  : - This supports java's basic input and output system, like file IO, 
  2. applet : - This supports applets

====================================================
Streams:
    Java perfomrs the IO through STREAMS.
    A Stream in java is an abstract that either produces or consumes information.
    A stream is linked to physical devices by java I/O system.
    All streams behave same even though the actual devices they are connect is different.
          Hence same I/O classes and methods in java can be applied to different devices.
  An input stream can abstract many different kinds of input from, disk, file , keyboard, network connectons.
  An output stream can refer to console, disk file,or ,network connections.

  Streams are cleaner way to deal with input and output without having everypart of program to understand the difference between a keyboard and network. 
  Java implements stream in java.io package.

====================================================

Byte Stream and Character Stream:

Byte Stream:
    These are defined by two abstract classes InputStream and OutputStream
    Several concrete subclasses have been defined from this, that handles different types of devices, like, disk file, network connections, memory buffers.

=========================================
Try with recourse:

    It is important to understand that the resource declared in the try statement is implicitly final. 
    This means that you can’t assign to the resource after it has been created. 
    The scope of the resource is limited to the try-with-resources statement.
    You can manage more than one resource within a single try statement. To do so, simply
    separate each resource specification with a semicolon

        There is one other aspect to try-with-resources that needs to be mentioned. 
    In general, when a try block executes, it is possible that an exception inside the try block will lead to
    another exception that occurs when the resource is closed in a finally clause. 
    In the case of a “normal” try statement, the original exception is lost, being preempted by the second
    exception. 
    However, when using try-with-resources, the second exception is suppressed. It
    is not, however, lost. Instead, it is added to the list of suppressed exceptions associated
    with the first exception. 
    The list of suppressed exceptions can be obtained by using the getSuppressed( ) method defined by Throwable.
  

