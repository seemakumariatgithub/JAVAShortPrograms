There are two main packages for IO in java :
  1. io 
  2. applet

  1. io  : - This supports java's basic input and output system, like file IO, 
  2. applet : - This supports applets

====================================================
Streams:
    Java perfomrs the IO through STREAMS.
    A Stream in java is an abstract that either produces or consumes information.
    A stream is linked to physical devices by java I/O system.
    All streams behave same even though the actual devices they are connect is different.
          Hence same I/O classes and methods in java can be applied to different devices.
  An input stream can abstract many different kinds of input from, disk, file , keyboard, network connectons.
  An output stream can refer to console, disk file,or ,network connections.

  Streams are cleaner way to deal with input and output without having everypart of program to understand the difference between a keyboard and network. 
  Java implements stream in java.io package.

====================================================

Byte Stream and Character Stream:

Byte Stream:
    These are defined by two abstract classes InputStream and OutputStream
    Several concrete subclasses have been defined from this, that handles different types of devices, like, disk file, network connections, memory buffers.

=========================================
Try with recourse:

    It is important to understand that the resource declared in the try statement is implicitly final. 
    This means that you can’t assign to the resource after it has been created. 
    The scope of the resource is limited to the try-with-resources statement.
    You can manage more than one resource within a single try statement. To do so, simply
    separate each resource specification with a semicolon

        There is one other aspect to try-with-resources that needs to be mentioned. 
    In general, when a try block executes, it is possible that an exception inside the try block will lead to
    another exception that occurs when the resource is closed in a finally clause. 
    In the case of a “normal” try statement, the original exception is lost, being preempted by the second
    exception. 
    However, when using try-with-resources, the second exception is suppressed. It
    is not, however, lost. Instead, it is added to the list of suppressed exceptions associated
    with the first exception. 
    The list of suppressed exceptions can be obtained by using the getSuppressed( ) method defined by Throwable.
  

==============================================
Transient modifier:

    Whenever an instance variable is declared as trasnsient, 
    when we try to store the object data the value of this transient variable will not be saved.

    That's why such variable data is not persisted.

eg class T{
 transient int a;
int b;
}

Here whenever the object of type T is wrrten to persistent storage area, 
the value of a will not be saved.
While the value of bb will be saved.

========================================================

Volatile modifer:

  This modifier tells the compiler that the variable can be modifed by any part of program unexpectedly.

  Especially in case of Multithreading, 
  every thread saves its prived copy of shared variable for fast access.
  Whenever a volatile variable value is changed by any part of program, 
  the compiler makes sure that every thread have the updated value for this volatile variable.

==========================================================
instanceof

  This provides the run-time type information of an object.
  This is useful when we are generating generalized routines that operate on objects of a complex class hierarchy.
===========================================================

strictfp modifier:

  This modifier ensures that the floating point calculation takes place preciesly.

  When a class is modified with strictfp, all of its method is modified by strictfp automatically.

=================================================================
assert keyword:

  This is used during program develpment to create an assertion.
  Assertion is a condition that should be true during program execution.
  Asserions are often used during testing to verify that sme expected condition is met.
  Assert are not used for release or production

  Assert keyword have two forms:
    1. 
        assert condition ;

        Here, the 'condition' is an expression that must evaluate to boolean result.
        If the result is true, then the assertion is true and no action will take place.
        If the result is false, then assertion fails and a default AssertionError object is thrown.

    2.
        assert condition: expr;

      Here 'expr' is the value that is passed to the AssertionError Constructor.
      This value is converted to its string form and displayed if an assertion fails.
      Mostly we use this to specify as string 
      Any non-void expresion is allowed for 'expr', as long as it can be converted to string.


====================================================================
static import: 

  It is used to import the static member of a class or interface.
  It is posible to refer to the static member by their names, without class name.
  It is used as :
      1. 1st form:
        import static <pkg-name>.<type name>.<static member name>;

If we use only package name, but not static member name in import, we will get

error: static import only from classes and interfaces

    1. 2nd form:

      import static <pkg-name>.<type name>.*;

    This will imprt all the static members
Example program:

        import static java.lang.Math.pow;
        import static java.lang.Math.sqrt;
        // Compute the hypotenuse of a right triangle.
        class Hypot {
             public static void main(String args[]) {
                 double side1, side2;
                 double hypot;
                 side1 = 3.0;
                 side2 = 4.0;
                 // Here, sqrt() and pow() can be called by themselves,
                 // without their class name.
                 hypot = sqrt(pow(side1, 2) + pow(side2, 2));
                 System.out.println("Given sides of lengths " +
                 side1 + " and " + side2 +" the hypotenuse is " +hypot);
             }
        }

    Static import can also be done for the user defined statci members of user defined classes or interfaces

Note: do not abuse the static import.
      Use static import only in the situations where we are using static member repeatedly.

============================================================

invoking the overloaded constructor using this() 

    The general form is :
      this(arg-list);

  
      The this() is executed, the oveloaded constructed that matches the parameter list specified byb arg-list is executed first.
      Then  if there is any statement inside the original constructor, they are execute.
      The call to this() must be the first statement within the constructor.

      One reason to use this, is it prevents duplication of code.

    There are 2 restrictions:
      1. You cannot use instance variable of the constructor's class in the call to 'this()'.
      2. You cnnot use 'super()' and 'this()', in the same constructor, as each must be the first statement in the contructor.

 


