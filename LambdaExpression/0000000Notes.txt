Intoduction:

    JDK8, added Lambda Expressions, that significantly enhance Java , beacuse of the two reasons:
      1. This added new syntax, that increased the expressive power of languge.
          This streamline the way some common constructs are implemented.
      2. Addition of this, added new capabilities, being incorporated into the API Library.
          Among these capability one is Parallel processing to take advantage of multicore processor,
          and second is new 'stream' API, which support pipeline operation on data.
      3. This expression also acted as catalyst for some features like:
              default method in interface
              method referencing

==================================================================
There are two important contructs here:
    
    1. Lambda Expression
    2. Functional Interface

    1. Lambda Expression:
            A Lambda Expression is an anonymous method.
            This method doesnot execute on its own.
            Instead this method is used to implement a method, defined by functional Interface.
            Thus result of labmda expresion is a form of anonymous class.
            Lambda expression is also known as 'closures'. 

    2. Functional Interface:
            A functional interface is an interface that contains, one and only one abstract method.
            Normally this method specifies the intended perpose of interface.
            Thus a functional interface typically represents a single action.
                Example: 
                        Runnnable, that hace only one method run().

            A functional interface specifies the 'target type' of lambda expression.
            A functional interface is also referred to as 'SAM type', 'Single Abstract Method'

NOTE: 
        1. A lambda expression can only be used in the context in which its target type is specified.
        2. A functional interface, can specify any public method defined in Object, without effecting its 'functional interface' status.

===========================================================================================================
LAMBDA EXPRESSION FUNDAMENTALS:

    Lambda Expression has intorduced a new 'syntax element' and 'operator' in JAVA language.
        new operator: 
                This is called lambda operator or arrow operator.
                This is ->
                ->, can be verbalized as 'goes to' or 'becomes'.
                This operator divides the lambda expression into two parts.
                     left side of '->', specifies the parameters required by lambda expression.
                     right side of '->',specifies the action of lambda expression, this is called 'lambda body'.
                lmbda body are of two types:
                    1. That have single line of code or expression.
                    2. That have a block of code.
                
        
        new syntax Element:
==============================================================================================================
FUNCTIONAL INTERFACE:

    After JDK8, an interface method is abstract only if it is not specified with default implementation.
    Nondefault methods are implicitly abstract.
    As mentioned earlier, a lambda expression can be specified only in a context in which a target type is defeined.
    One of these contests is created when a lambda expression is assigned to a functional interface reference.
    Other target type contexts include:
                variable initialization.
                return statements
                method arguments etc.
    When lambda expression occurs in a taget type context, an instance of a class is automatically created.
        This implements the functional interface, with the lambda expression defining the behavior of the abstract method
declared by functional interface.
    When that method is called through the target, the lambda expression is executed.
    Thus lambda expression gives us way to transform a code segment into an object.

NOTE: 
        In order for an lambda expression to be used in a target context, the type of abstract method 
and the type of lambda expression must be compatible.
        In general:
            1. the type and number of the lambda expression's parameters must be compatible with the method's parameter.
            2. the return types must be compatible
            3. any exceptions thrown by the lambda expression must be acceptable to the method.
            4. If we explicitly declare the type of parameter in lambda expression,, ten all of the parameters must have declared types.


Example Code: Lambda01_firstExample.java  
              Lambda02_withParameter.java
        
========================================================================================================================
BLOCK LAMBDA EXPRESSION:

    The lambda body, that consists of single expression is called 'expression bodies'.
    The lambda that have these expressions is called, 'expression lambda'.

    The lambda in which right side of '->' operator consists of block of codes, i.e multiple line of codes,
        is called as 'block lambda'.
    Body of such lambda is called 'block body'.

    Unlike the lambda expression, a block lambda, ust explicitly use return statement to retrun a value.
=================================================================================================================
GENERIC FUNCTIONAL INTERFACE:

    Since lambda function iteself cannot specify the type parameter, it cannot be generic.
    However the functional interface associated with lambda expressions can be Generc.
            In this case the target type of lambda expression is determined, 
                in part, by the type arguments/argument specified when a functional interface reference is declared.

    Here, instead of having two different funcitonal interfaces whose method differ only in their data types, 
        it is possible to declare one generic interface, that can be used to hande both the circumstances.

Example code:Lambda03_genericLambdaExpr.java
===================================================================================================================

PASSING LAMBDA EXPRESSION AS AN ARGUMENT:
    To pass a lmabda expression as an argument, 
        the type of the parameter recieveing the lambda expression as argument,
            must be of a functional interface type compatible with the lambda.

===================================================================================================================

LAMBDA EXPRESSION AND EXCEPTIONS: 

        Lambda expressions can throw an exception.
        1. if lambda expression throws checked exception, 
            then this must be compatible with the exceptions listed in the throws list of abstract method of functional interface.

===================================================================================================================
LAMBDA EXPRESSIONS AND VARiABLE CAPTURE:

        A variable defined by the enclosing scope of lambda function, is accessible from within the lambda expression.
            for example a lambda expression can use an instance or static variable defiened by its enclosing class.
        A lambda expression, also have access to 'this'(both explicitly and implicitly),
            'this' here referes to the invoking instance of the lambda expression's enclosing class.
        A lambda expression can:
            1. obtain or set the value of an instance or static variable 
            2. Call a method defined by its enclosing class.

NOTE:
        When a lambda expression uses local variable from its enclosing scope,
            a special situation is created that is referred to as a 'variable capture'.
        For this case, a lambda can only use a local variable that are 'effectivly final'.

        An EFFECTIVLY FINAL Variable is one whose value doesnot changes after it is assigned.
            such varaibles are not needed to explicitly declared as final.
            although doing so will not create an error.
        A local variable of enclosing scope, cannot be modfied by lambda.
            As this will remove the effectively final status of variable, thus it cannot be captured.
            This will throw compile time error.
        
=====================================================================================================================
METHOD REFERENCE:
        This provides a way to refer to a method without executing it.
        When evaluating the method reference it creates the instance of functional interface.
        Just like lmbda expressions this too requires the target type context to be campatible with the functional interface.

        Different types of method references:
        1. reference to static method.
        2. refernece to instance method.
        3. refenrece with Generic.

        1. reference to static method:
            To create a static method reference the general syntax is:
                ClassName::MethodName

        2. refernece to instance method:

        3. refenrece with Generic:
    
=====================================================================================================================
CONSTRUCTOR REFERENCE:

            className::new

            based on the abstract method of functional interface, the appropriate constructor will be called.
=====================================================================================================================
PREDEFIENED FUNCTIONAL INTERFACES:

    JDK 8 have provided many (43)prdefined functional interfaces in 

            'java.uitl.function' package

Interfaces and their Purpose:
       1. UnaryOperator<T> : Apply a unary operation to an object of type T.
                             Return the result, which is also of type T. 
                             Its method is called apply( ).

       2. BinaryOperator<T> : Apply an operation to two objects of type T.
                              Return the result, which is also of type T. 
                              Its method is called apply( ).

       3. Consumer<T> : Apply an operation on an object of type T. 
                        Its method is called accept( ).

       4. Supplier<T> : Return an object of type T. 
                        Its method is called get( ).

       5. Function<T, R> : Apply an operation to an object of type T. 
                           Return the result as an object of type R. 
                           Its method is called apply( ).

       6. Predicate<T> : Determine if an object of type T fulfills some constraint. 
                         Return a boolean value that indicates the outcome. 
                         Its method is called test( ).



















