Thread
============================================================================================

THREAD STATES:

  A thread can be in any of the following states:
     1.  A thread can be 'running'.
      2. It can be 'ready to run' as soon as it gets CPU time.
      3. A running thread can be 'suspended',this temporarily halts its activiy.
      4. A 'suspended' thread cn then be 'resumed', allowing it to pick up where it left off.
      5. A thread can be 'blocked' when waiting for a resource.
      6. At ay time, a thread can be 'terminated', which halts all its execution immediately.
            Once a thread is terminated it cannot be resumed.
===============================================================================================

THREAD PRIORITIES:

    This defines how a thread should be treated with respect to other threads.
    Thread priority is the integer value, that defines the reltive priority of one thread to other.
    As an absolute value, a thread priority is meaningless.
    A higher-priority thread doesn't rum any faster than a lower-priority thread, if it is the only thread running.
    Instead, a thread's priority is used to decide when to switch from one running thread to the next thread.
        This switching is called context switch.
        The rules that determines whhen a context switch will take place is simple:
            1. "A thread can voluntarily relinquish control".
            2. "A thread can be preempted by a higher- priority thread".

            1. "A thread can voluntarily relinquish control".:
                    This can be done by eplicitly yeilding, sleeping, or blocking on pending I/O operations.
                    After this all the threads are examined and the thread with higher-priority wil be given the CPU.
            2. "A thread can be preempted by a higher- priority thread".
                    In this case the lower-priority thread that does not yeild the processor is simply preempted,
                    (No matter what it is doing) by higher-priority thread.

NOTE:  For OS like Windows, the threads of equal priorities are time-sliced automatically in rund robin fashion.

===============================================================================================

SYNCHRONIZATION:

    To enforce the synchronouw behaviour in the multithread environment, Java used a control mchanism, called 'the monitor'.
    This mechanism was first defined by C.A.R Hoare.

    Monitor can be thought of as a small box, that can hold only one thread.
    Once  thread enters a monitor, all other threads mut wait until that thread exits the monitor.
    In this way monitor can be used to protect a shared asset from being manipulated by more than one thread at a time.

    In Java, there is no class as "Monitor".
    So this mechanism is implemented as below:
          Each object has it own implicit monitor,
            that is automatically entered when one of the object's snchronized methods is called.
          Once a thread is inside a synchronied method no other thread can call any other synchronized method on the same object.

================================================================================================
MESSAGING:
    Java have defined a clean, and low-cost way for two or more threads to communicate to each other.
    This is done by calls to the predefined methods that all objects have.
    This allows a thread to enter a synchronized method on a object ,
        and then wait there until some other thread explicitly notifies it to come out.

=================================================================================================

Thread Class and Runnable Interface:

      






