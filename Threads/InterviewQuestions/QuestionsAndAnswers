Q1.  What’s the difference between class lock and object lock?
Ans : Class Lock: In java, each and every class has a unique lock usually referred to as a class level lock.
      These locks are achieved using the keyword ‘static synchronized’ and can be used to make static data thread-safe. 
      It is generally used when one wants to prevent multiple threads from entering a synchronized block. 
      Example:  
        public class ClassLevelLockExample  
        {    
            public void classLevelLockMethod()  
             {       
               synchronized (ClassLevelLockExample.class)  
               {         
                    //DO your stuff here       
               }    
             } 
        } 
        Object Lock: In java, each and every object has a unique lock usually referred to as an object-level lock.
        These locks are achieved using the keyword ‘synchronized’ and can be used to protect non-static data.
        It is generally used when one wants to synchronize a non-static method or block so that only the thread 
        will be able to execute the code block on a given instance of the class.  
        Example: 
          public class ObjectLevelLockExample  
            {    
                public void objectLevelLockMethod()  
               {   
                   synchronized (this)  
                   {     
                    //DO your stuff here   
                   } 
               }
            } 

Q2: User Thread	Daemon Thread 
Ans :JVM waits for user threads to finish their tasks before termination. 	
    JVM does not wait for daemon threads to finish their tasks before termination.

    These threads are normally created by the user for executing tasks concurrently.
    These threads are normally created by JVM.

    They are used for critical tasks or core work of an application.
    They are not used for any critical tasks but to do some supporting tasks.

    These threads are referred to as high-priority tasks, therefore are required for running in the foreground. 	
    These threads are referred to as low priority threads, therefore are especially required for supporting background 
    tasks like garbage collection, releasing memory of unused objects, etc. 


Q3: 11. What is Runnable and Callable Interface? Write the difference between them.
Ans: Both the interfaces are generally used to encapsulate tasks that are needed to be 
    executed by another thread. But there are some differences between them as given below: 

Running Interface: This interface is basically available in Java right from the beginning.
                    It is simply used to execute code on a concurrent thread.  
Callable Interface: This interface is basically a new one that was introduced as a part of the concurrency package.
                    It addresses the limitation of runnable interfaces along with some major changes like generics,
                    enum, static imports, variable argument method, etc. It uses generics to define the return type of object.










