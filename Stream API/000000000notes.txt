INTRODUCTION==============================================================================

This was Introduced as part of JDK8.
Stream API is designed with lambda expressions in mind.
The Key aspects of stream API is its ability to perform sophisticated operations:
      1. search
      2. filter
      3. map
      4. data manipulation and handling in efficient way

===========================================================================================
STREAM:

    The term 'stream' here means conduit of data
    Thus stream here reresents sequence of data.
    A stream operates on data source, like: an array or a collection

NOTE:
      1. A stream itself never provide storage of data.
            It just movs the data, or filters the data, or sorts the data or operats on the dat suring process.
      2. A stream operation by itself doesnot modifies the data.
             For example:
                  Sorting the data doesnot change the data at source.
                  Infact sorting the stream will create a new stream with soreted result in it.

                  
      3. THE TERM STREAM AS USED HERE, differes from the use of stream word in I/O Classes.
            Although conceptual these two seems same, but they are not same.
===============================================================================================

STREAM INTERFACES:
      Stream API have defined several stream interfaces in the package:

                  java.util.stream

      1. BaseStream Interface:
                  This is at the foundation level.
                  It defines the basic functionality that are available for all the streams.
                  This is the generaic interface.
                  It is defined as :

                        interface BaseStream<T, S extends BaseStream<T,S>>

                  Here :
                        T -> specifies the type of element in the stream.
                        S -> specifies the type of stream that extends BaseStrea interface.


                  BaseStream extends AutoClosable interface.
                        Hence a stream can be managed in 'try-with-resource' statement.


                  Methods defined in BaseStream interfaces:

                        void close( ): Closes the invoking stream, calling any registered close handlers. (As few streams need to be closed.)
                        boolean isParallel( ): Returns true if the invoking stream is parallel. Returns false if the stream is sequential.

                        Iterator<T> iterator( ): Obtains an iterator to the stream and returns a reference to it.
                                                (Terminal operation.)
                        Spliterator<T> spliterator( ): Obtains a spliterator to the stream and returns a reference to it.
                                                (Terminal operation.)

                        S onClose(Runnable handler): Returns a new stream with the close handler specified by handler. 
                                                      This handler will be called when the stream is closed.
                                                (Intermediate operation.)
                        S parallel( ): Returns a parallel stream based on the invoking stream. 
                                    If the invoking stream is already parallel, then that stream is returned.                                                                                                             (Intermediate operation.)
                        S sequential( ): Returns a sequential stream based on the invoking stream. 
                                          If the invoking stream is already sequential, then that stream is returned.
                                          (Intermediate operation.)                        
                        S unordered( ): Returns an unordered stream based on the invoking stream. 
                                         If the invoking stream is already unordered, then that stream is returned. 
                                          (Intermediate operation.)


      There are many interfaces derived from BaseStream interface:
            1. Stream

            2. Stream interface:
                        This is derived from the BaseStream interface.
                        It is declared as :
                              interface Stream<T>

                        As this is generic, stream is used for all reference type.
======================================================================================================================
Type of operation in stream:

1. Terminal Operations:
            A terminal operation consumes the stream.
            Once a stream has been consumed , it cannot be reused.
            This operation is used to produce a result.
                  like: finding minimum or maximum in the stream.
                        to execute some action, in case with forEach() method.
2. Intermediate operations:
            An intermediate perations produces another stream.
            This operation shows 'lazy behaviour'.
                  Means , they do not take place immediately.
                        The specified action is perfomrmed when terminal operation is executed on the new stream created by an intermediate operation.
            This lazy behaviour provides more efficiency to the the strem API.

            Some intermediate operations are :
                        1. stateless
                        2. stateful

                        1. stateless:
                              In this each element is processed independently of other.
                              Eg:
                                    filtering an element based on stateless predicate is stateless, as  elements are handled individually.
                                    so filter() method's operation is stateless operation.
                              
                        2. stateful
                              In this the processing of an element depends on the aspects of other element.
                              Eg: 
                                    sorting is statefule operation as elements order depends on the value of other element.
                                    so sorted() method's operation is stateful operation.


NOTE: This differentiation between stateful and stateless is important while dealing with parallel stream.
      As stateful process may require more than one pass to complete.

============================================================================================================================
NOTE: 
1. stream operates on Object reference.
2. As stream operates on Object reference, hence it cannot operate directly on primitive data type.
3. To operate on premitive type stream, Stream API have defined different interfaces, that are:
            DoubleStream
            IntStream
            LongStream
4. All of above interface have extended BaseStream interface.
5. These interfaces have all the capability same as Stream interface, 
            except that these donot operate on reference, rather they operate on primitive data types.
6.These interfaces have also provided few additional methods like boxed().

============================================================================================================================
METHODS OF Stream interface:

            <R, A> R collect(Collector<? super T, A, R> collectorFunc): 
                        Collects elements into a container, which is changeable, and returns the container. 
                        This is called a mutable reduction operation. 
                        Here:
                             R specifies the type of the resulting container 
                             T specifies the element type of the invoking stream. 
                             A specifies the internal accumulated type. 
                             The collectorFunc specifies how the collection process works. 
                             (Terminal operation.)

            long count( ):
                        Counts the number of elements in the stream and returns the result. 
                        (Terminal operation.)

            void forEach(Consumer<? super T> action):
                        For each element in the invoking stream, the code specified by action is executed. 
                        (Terminal operation.)

            Optional<T> max( Comparator<? super T> comp):
                        Using the ordering specified by comp, finds and returns the maximum element in the invoking stream. 
                        (Terminal operation.)
            
            Optional<T> min(Comparator<? super T> comp):
                        Using the ordering specified by comp, finds and returns the minimum element in the invoking stream. 
                        (Terminal operation.)

            T reduce(T identityVal, BinaryOperator<T> accumulator):
                        Returns a result based on the elements in the invoking stream. This is called a reduction operation. 
                        (Terminal operation.)

            Object[] toArray( ): 
                        Creates an array from the elements in the invoking stream. 
                        (Terminal operation.)

=============================

            Stream<T> filter(Predicate<? super T> pred) :
                         Produces a stream that contains those elements from the invoking stream that satisfy the predicate specified by pred. 
                        (Intermediate operation.) 

            <R> Stream<R> map(Function<? super T,? extends R> mapFunc):
                        Applies mapFunc to the elements from the invoking stream, yielding a new stream that contains those elements. 
                        (Intermediate operation.)

            DoubleStream mapToDouble(ToDoubleFunction<? super T> mapFunc):
                        Applies mapFunc to the elements from the invoking stream, yielding a new DoubleStream that contains those elements. 
                        (Intermediate operation.)

            IntStream mapToInt(ToIntFunction<? super T> mapFunc):
                        Applies mapFunc to the elements from the invoking stream, yielding a new IntStream that contains those elements. 
                        (Intermediate operation.)

            LongStream mapToLong( ToLongFunction<? super T> mapFunc):
                        Applies mapFunc to the elements from the invoking stream, yielding a new LongStream that contains those elements. 
                        (Intermediate operation.)          

            Stream<T> sorted( ): 
                        Produces a new stream that contains the elements of the invoking stream sorted in natural order. 
                        (Intermediate operation.)
====================================================================================================================================






      

