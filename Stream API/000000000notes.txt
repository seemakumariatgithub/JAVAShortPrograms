INTRODUCTION==============================================================================

This was Introduced as part of JDK8.
Stream API is designed with lambda expressions in mind.
The Key aspects of stream API is its ability to perform sophisticated operations:
      1. search
      2. filter
      3. map
      4. data manipulation and handling in efficient way

===========================================================================================
STREAM:

    The term 'stream' here means conduit of data
    Thus stream here reresents sequence of data.
    A stream operates on data source, like: an array or a collection

NOTE:
      1. A stream itself never provide storage of data.
            It just movs the data, or filters the data, or sorts the data or operats on the dat suring process.
      2. A stream operation by itself doesnot modifies the data.
             For example:
                  Sorting the data doesnot change the data at source.
                  Infact sorting the stream will create a new stream with soreted result in it.

                  
      3. THE TERM STREAM AS USED HERE, differes from the use of stream word in I/O Classes.
            Although conceptual these two seems same, but they are not same.
===============================================================================================

STREAM INTERFACES:
      Stream API have defined several stream interfaces in the package:

                  java.util.stream

      1. BaseStream Interface:
                  This is at the foundation level.
                  It defines the basic functionality that are available for all the streams.
                  This is the generaic interface.
                  It is defined as :

                        interface BaseStream<T, S extends BaseStream<T,S>>

                  Here :
                        T -> specifies the type of element in the stream.
                        S -> specifies the type of stream that extends BaseStrea interface.


                  BaseStream extends AutoClosable interface.
                        Hence a stream can be managed in 'try-with-resource' statement.


                  Methods defined in BaseStream interfaces:

                        void close( ): Closes the invoking stream, calling any registered close handlers. (As few streams need to be closed.)
                        boolean isParallel( ): Returns true if the invoking stream is parallel. Returns false if the stream is sequential.

                        Iterator<T> iterator( ): Obtains an iterator to the stream and returns a reference to it.
                                                (Terminal operation.)
                        Spliterator<T> spliterator( ): Obtains a spliterator to the stream and returns a reference to it.
                                                (Terminal operation.)

                        S onClose(Runnable handler): Returns a new stream with the close handler specified by handler. 
                                                      This handler will be called when the stream is closed.
                                                (Intermediate operation.)
                        S parallel( ): Returns a parallel stream based on the invoking stream. 
                                    If the invoking stream is already parallel, then that stream is returned.                                                                                                             (Intermediate operation.)
                        S sequential( ): Returns a sequential stream based on the invoking stream. 
                                          If the invoking stream is already sequential, then that stream is returned.
                                          (Intermediate operation.)                        
                        S unordered( ): Returns an unordered stream based on the invoking stream. 
                                         If the invoking stream is already unordered, then that stream is returned. 
                                          (Intermediate operation.)


      There are many interfaces derived from BaseStream interface:
            1. Stream

            2. Stream interface:
                        This is derived from the BaseStream interface.
                        It is declared as :
                              interface Stream<T>

                        As this is generic, stream is used for all reference type.
======================================================================================================================
Type of operation in stream:

1. Terminal Operations:
            A terminal operation consumes the stream.
            Once a stream has been consumed , it cannot be reused.
            This operation is used to produce a result.
                  like: finding minimum or maximum in the stream.
                        to execute some action, in case with forEach() method.
      NOTE: If we try to reuse the cosumed stream we will get error msg as:
                  ERROR!
                  Exception in thread "main" java.lang.IllegalStateException: stream has already been operated upon or closed
            
2. Intermediate operations:
            An intermediate perations produces another stream.
            This operation shows 'lazy behaviour'.
                  Means , they do not take place immediately.
                        The specified action is perfomrmed when terminal operation is executed on the new stream created by an intermediate operation.
            This lazy behaviour provides more efficiency to the the strem API.

            Some intermediate operations are :
                        1. stateless
                        2. stateful

                        1. stateless:
                              In this each element is processed independently of other.
                              Eg:
                                    filtering an element based on stateless predicate is stateless, as  elements are handled individually.
                                    so filter() method's operation is stateless operation.
                              
                        2. stateful
                              In this the processing of an element depends on the aspects of other element.
                              Eg: 
                                    sorting is statefule operation as elements order depends on the value of other element.
                                    so sorted() method's operation is stateful operation.


NOTE: This differentiation between stateful and stateless is important while dealing with parallel stream.
      As stateful process may require more than one pass to complete.

============================================================================================================================
NOTE: 
1. stream operates on Object reference.
2. As stream operates on Object reference, hence it cannot operate directly on primitive data type.
3. To operate on premitive type stream, Stream API have defined different interfaces, that are:
            DoubleStream
            IntStream
            LongStream
4. All of above interface have extended BaseStream interface.
5. These interfaces have all the capability same as Stream interface, 
            except that these donot operate on reference, rather they operate on primitive data types.
6.These interfaces have also provided few additional methods like boxed().

============================================================================================================================
METHODS OF Stream interface:

            <R, A> R collect(Collector<? super T, A, R> collectorFunc): 
                        Collects elements into a container, which is changeable, and returns the container. 
                        This is called a mutable reduction operation. 
                        Here:
                             R specifies the type of the resulting container 
                             T specifies the element type of the invoking stream. 
                             A specifies the internal accumulated type. 
                             The collectorFunc specifies how the collection process works. 
                             (Terminal operation.)

            long count( ):
                        Counts the number of elements in the stream and returns the result. 
                        (Terminal operation.)

            void forEach(Consumer<? super T> action):
                        For each element in the invoking stream, the code specified by action is executed. 
                        (Terminal operation.)

            Optional<T> max( Comparator<? super T> comp):
                        Using the ordering specified by comp, finds and returns the maximum element in the invoking stream. 
                        (Terminal operation.)
            
            Optional<T> min(Comparator<? super T> comp):
                        Using the ordering specified by comp, finds and returns the minimum element in the invoking stream. 
                        (Terminal operation.)

            T reduce(T identityVal, BinaryOperator<T> accumulator):
                        Returns a result based on the elements in the invoking stream. This is called a reduction operation. 
                        (Terminal operation.)

            Object[] toArray( ): 
                        Creates an array from the elements in the invoking stream. 
                        (Terminal operation.)

=============================

            Stream<T> filter(Predicate<? super T> pred) :
                         Produces a stream that contains those elements from the invoking stream that satisfy the predicate specified by pred. 
                        (Intermediate operation.) 

            <R> Stream<R> map(Function<? super T,? extends R> mapFunc):
                        Applies mapFunc to the elements from the invoking stream, yielding a new stream that contains those elements. 
                        (Intermediate operation.)

            DoubleStream mapToDouble(ToDoubleFunction<? super T> mapFunc):
                        Applies mapFunc to the elements from the invoking stream, yielding a new DoubleStream that contains those elements. 
                        (Intermediate operation.)

            IntStream mapToInt(ToIntFunction<? super T> mapFunc):
                        Applies mapFunc to the elements from the invoking stream, yielding a new IntStream that contains those elements. 
                        (Intermediate operation.)

            LongStream mapToLong( ToLongFunction<? super T> mapFunc):
                        Applies mapFunc to the elements from the invoking stream, yielding a new LongStream that contains those elements. 
                        (Intermediate operation.)          

            Stream<T> sorted( ): 
                        Produces a new stream that contains the elements of the invoking stream sorted in natural order. 
                        (Intermediate operation.)

            static <T> Stream<T>	of(T... values)
                       Returns a sequential ordered stream whose elements are the specified values.
                        (Intermediate operation.)
            static <T> Stream<T>	of(T t)
                        Returns a sequential Stream containing a single element.
                        (Intermediate operation.)

            Stream<T>	limit(long maxSize)
                        Returns a stream consisting of the elements of this stream, truncated to be no longer than maxSize in length.
                        (Intermediate operation.)
            static <T> Stream<T>	generate(Supplier<T> s)
                        Returns an infinite sequential unordered stream where each element is generated by the provided Supplier.
                        (Intermediate operation.)
            Stream<T>	distinct()
                        Returns a stream consisting of the distinct elements (according to Object.equals(Object)) of this stream.
                        (Intermediate operation.)



====================================================================================================================================
OBTAINING a STREAM:

      A Stream be obtained by any of the below way:
      1. from Collection: 
      2. from Array:
      3. Stream operation that returns new stream. 
      4. Stream to I/O source by calling line() of BufferedReader
      5. And many other way.

      1. for a Collection:
            There are two methods defined in Collection interface for obtaining stream:
                  1. default Stream<E> stream() :  This returns a sequential stream.
                  2. default Stream<E> parallelStream(): This returns the parallel stream.
      As the Collection interface is implemented by every collection, these methods can be used to obtain the stream of any collection class.

      2. from Arrays: 
            Arrays class have added a static method to obtain stream.
                  1. static <T> Stream <T> stream(T[] array)
                  2. other overloaded method of stream to handle primitive type. 
                     They return stream of type IntStream, DoubleStream and LongStream.

      3. Stream operation that returns new stream:
            Like :
                  1. of()
                  2. stream()
      

===================================================================================================================================
Reduction Operation:

      In the Stream API language, reduction operation means any operation that reduces the  stream to a single value.
      Few reduction methods in stream are:
            min()
            max()
            count()
      stream API have generalized this concept by proiding a method:
            reduce()
            This method returns a value from the stream based on any criteria.

      By default all reduction operations are 'TERMINAL OPERATION'.

      Stream have defined three version of reduce():
            1. Optional<T> reduce(BinaryOperator<T> accumulator):
                  Performs a reduction on the elements of this stream, 
                  using an associative accumulation function, 
                  and returns an Optional describing the reduced value, if any.

            2. T	reduce(T identity, BinaryOperator<T> accumulator):
                  Performs a reduction on the elements of this stream, 
                  using the provided identity value and an associative accumulation function, 
                  and returns the reduced value.

            3. <U> U reduce(U identity, BiFunction<U,? super T,U> accumulator, BinaryOperator<U> combiner):
                  Performs a reduction on the elements of this stream, 
                  using the provided identity, accumulation and combining functions.


            Here, 'val' will contain the previous result and val2 will contain the next element.
            In its first invocation, val will contain either the identity value or the first element, depending on which version of reduce( ) is used.

            Here, the accumulator operator must satify the below three conditions:
                  1. Stateless
                  2. Non-interfering
                  3. Associative

                  1. Stateless : means, the operation shouldnot rely on any state information.Thus each element is processed independently.  
                  2. Non-interfering : means, data source is not modified by the operation.
                  3. Associative : means, in normal arithematic sense, that is it doesnot matter which pair of operand is processed first.

============================================================================================================
Using Parallel Stream:

      MoreOver, a Parallel programing can be complex and errr prone.
      One benefit that stream library provides for parallel programing is, ablity to easily and reliably paralle process certian operations.

      Parallel processing is quite simple, just use parallel stream.

      Obtaining Parallel Stream:
            1. from Collections : using parallelStream() method defined in Collection.
            2. from sequential stream: call parallel method on sequential stream.
            3.

      parallel() method is defined in BaseStream interface as :      

            S parallel()

      This method returnd a parallel stream based on the sequential stream invoked.
      If stream is already parallel, then the invoking stream will be returned.

      NOTE: that even with parallel stream, parallelism can be achieved only if the environment supports it.
      Once the parallel stream is obtained, the operation on the stream can occur in parallel, assuming that the environment supports the parallelism.

      As a general RULE:
      Any parallel operation should be:
            1. Stateless
            2. non-interfering
            3. associative
      This ensures that the result obtained by parallel stream is same as those obtained by sequential stream.
      With parallel below version of reduce is helpful:

            <U> U reduce(U identityVal, BiFunction<U, ? super T, U> accumulator BinaryOperator<U> combiner)

      Here :
      combiner: is function that combines tow values, produced by accumulator function.
      accumulaator: This defines the action to be performed on elements.

      OTHER RELATED MEthODS:

      1. S sequential() : this convverts a parallel stream back to sequentail.
      2. U unodrered(): 
      3. forEachOrderd(): it performs operation os parallel stream while preserving the order.


==========================================================================================================
MAPPING

      It is often useful to map the elements of one stream to another.
      Or sometime we might want to apply some transformation to the elements of stream.
            For this we can map the transformed element to a new Stream.
      Stream API have build-in suppport for mapping.
      The most general method is map(), it is defined as:

                  <R> Stream<R> map(Function<? super T, ? extends R> mapFunc)
      Here :
      R : specifies type of element of the new stream 
      T : specifies type of element of the invoking stream.
      mapFunc: is the instance of 'Function' interface (a functional interface declared in java.util.function), that does the mapping.

      This method is:
            1. stateless
            2. non-interfering
      Since it returns stream, it is intermediate function



















